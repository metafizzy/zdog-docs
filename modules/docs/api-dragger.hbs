<h2>Dragger</h2>

<p>Tracks dragging interaction with pointer events. <code>Illustration</code> inherits <code>Dragger</code> which enables <code>dragRotate</code> and use of the <i>onDrag</i> callback functions.</p>

<p>The <code>Dragger</code> class by itself is useful for dragging interactions outside of <a href="#illustration-dragrotate"><code>Illustration.dragRotate</code></a> or <a href="extras#rendering-without-illustration">rendering without <code>Illustration</code></a>. See <a href="#shape-updatepath"><code>updatePath</code></a> for another Dragger demo.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // use Dragger to rotate shapes separately
    let circle = new Zdog.Ellipse({...});
    let triangle = new Zdog.Shape({...});
    // variables for rotation dragging
    let viewRotation = new Zdog.Vector();
    let dragStartRX, dragStartRY;

    new Zdog.Dragger({
      startElement: illo.element,
      onDragStart: function() {
        // highlight on drag start
        circle.color = '#C25';
        triangle.color = '#EA0';
        // keep track of rotation
        dragStartRX = viewRotation.x;
        dragStartRY = viewRotation.y;
      },
      onDragMove: function( pointer, moveX, moveY ) {
        // move rotation
        let moveRX = moveY / illo.width * Zdog.TAU * -1;
        let moveRY = moveX / illo.width * Zdog.TAU * -1;
        viewRotation.x = dragStartRX + moveRX;
        viewRotation.y = dragStartRY + moveRY;
      },
      onDragEnd: function() {
        // remove highlight colors on drag end
        circle.color = '#636';
        triangle.color = '#E62';
      },
    });

    function animate() {
      // rotate shapes
      circle.rotate.set( viewRotation );
      triangle.rotate.set( viewRotation );
      illo.updateRenderGraph();
      requestAnimationFrame( animate );
    }
    animate();
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="draggerRotateSync"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="zQPyZq"}}
  </div>
</div>

{{! --------------------------------------------- }}

<h3>startElement</h3>

<p>The element to start dragging on the initial <code>mousedown</code>, <code>pointerdown</code>, or <code>touchstart</code> event.</p>

``` js
// set with a selector string
startElement: '.zdog-canvas'

// set with an Element
startElement: document.querySelector('.zdog-canvas')
```

{{! --------------------------------------------- }}

<h3>onDragStart</h3>

<p>Callback function triggered when dragging starts with the initial <code>mousedown</code>, <code>pointerdown</code>, or <code>touchstart</code> event.</p>

``` js
onDragStart: function( pointer ) {
  console.log(`Drag started at ${pointer.pageX}, ${pointer.pageY});
}
```

<ul>
  <li><code>pointer</code> - the <i>Event</i> or <i>Touch</i> object with <code>.pageX</code> and <code>.pageY</code>.</li>
</ul>

{{! --------------------------------------------- }}

<h3>onDragMove</h3>

<p>Callback function triggered when dragging moves with <code>mousemove</code>, <code>pointermove</code>, or <code>touchmove</code> event.</p>

``` js
onDragMove: function( pointer, moveX, moveY ) {
  console.log(`Drag moved ${moveX}, ${moveY}`);
}
```

<ul>
  <li><code>pointer</code> - the <i>Event</i> or <i>Touch</i> object with <code>.pageX</code> and <code>.pageY</code>.</li>
  <li><code>moveX</code> - horizontal distance moved from the dragStart position.</li>
  <li><code>moveY</code> - vertical distance moved from the dragStart position.</li>
</ul>


{{! --------------------------------------------- }}

<h3>onDragEnd</h3>

<p>Callback function triggered when dragging ends on the <code>mouseup</code>, <code>pointerup</code>, or <code>touchend</code> event.</p>

``` js
onDragEnd: function() {
  console.log('Drag ended');
}
```

{{! --------------------------------------------- }}
