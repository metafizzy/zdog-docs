{{! --------------------------------------------- }}

<h2>Concepts</h2>

{{! --------------------------------------------- }}

<h3>Child shapes</h3>

<p>Zdog models are built with shapes. Shapes can be positioned with <code>translate</code>. Their positions are <em>relative</em>. For instance, when added to an <code>Illustration</code>, shapes are positioned relative to the <code>Illustration</code>&rsquo;s origin.</p>

<div class="example">
  <div class="example__code">
    ``` js
    let zCircle = new Zdog.Ellipse({
      addTo: illo,
      translate: { z: 40 }, // z +40 from illo
      // ...
    });

    let xRect = new Zdog.Rect({
      addTo: illo,
      translate: { x: 40 }, // x +40 from illo
      // ...
    });

    let yTri = new Zdog.Polygon({
      addTo: illo,
      translate: { y: -60 }, // y -60 from illo
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="childShapes" data-step="1"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="KLXewa"}}
  </div>
</div>

{{> child-shapes-add-to }}

<p><code>translate</code> is a transform — as is <code>rotate</code> and <code>scale</code>. Child shapes inherit the transforms of their parents (<i>wow, that is deep</i>).</p>

<div class="example">
  <div class="example__code">
    ``` js
    let zCircle = new Zdog.Ellipse({
      addTo: illo,
      scale: 1.5, // scale 150%
      translate: { z: 40 },
      rotate: { z: -Zdog.TAU/8 }, // rotate 45° CCW
      // ...
    });

    let xRect = new Zdog.Rect({
      addTo: zCircle,
      translate: { x: 40 },
      rotate: { x: Zdog.TAU/8 }, // rotate back
      // ...
    });

    let yTri = new Zdog.Polygon({
      addTo: xRect,
      translate: { y: -60 },
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="childShapes" data-step="3"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="LozrGX"}}
  </div>
</div>

<p>Using child shapes and their additive transforms enables you to build complex models.</p>

{{! --------------------------------------------- }}

<h3>Anchors</h3>

<p>An <code>Anchor</code> is an invisible shape. Use an <code>Anchor</code> for transforms without rendering a shape.</p>

<div class="example">
  <div class="example__code">
    ``` js
    let zAnchor = new Zdog.Anchor({
      addTo: illo,
      scale: 1.5,
      translate: { z: 40 },
      rotate: { z: -Zdog.TAU/8 },
    });

    let xAnchor = new Zdog.Anchor({
      addTo: zAnchor,
      translate: { x: 40 },
      rotate: { x: Zdog.TAU/8 },
    });

    let yTri = new Zdog.Polygon({
      addTo: xAnchor,
      translate: { y: -60 },
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="childShapes" data-step="4"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="MdEXeE"}}
  </div>
</div>


{{! --------------------------------------------- }}

<h3>Vector Objects</h3>

<p>Properties like <code>translate</code>, <code>rotation</code>, and <code>scale</code> are <code>Vector</code>s. A <code>Vector</code> can be set with a vector <i>Object</i>.</p>

{{> vector-objects }}

``` js
translate: { x: 1, z: 2 }, // => { x: 1, y: 0, z: 2 }
translate: { y: 3 },       // => { x: 0, y: 3, z: 0 }
translate: {}              // => { x: 0, y: 0, z: 0 }
```

{{! --------------------------------------------- }}

<h3>Copying</h3>

<p>Copy items with <code>.copy()</code>.</p>

{{> copy-example }}

<p>Copy items with their children with <code>.copyGraph()</code>.</p>

{{> copy-graph-example }}

{{! --------------------------------------------- }}

<h3>Stroke volume</h3>

<p>Whereas polygonal 3D engines rely on meshes of polygons to depict volume, Zdog shapes can show volume with <code>stroke</code>.

<p>Look at this tasty burger. The patty and cheese slice are just simple circles. The sesame seeds are just lines. But with thick <code>stroke</code> they appear as plump round discs and pills.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // cheese
    new Zdog.Rect({
      width: 92,
      height: 92,
      stroke: 16,
      // ...
    });
    // patty
    new Zdog.Ellipse({
      diameter: 72,
      stroke: 28,
      // ...
    });
    // seed
    new Zdog.Shape({
      path: [ { y: -3 }, { y: 3 } ],
      stroke: 8,
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="tastyBurger" class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="QRqxMv"}}
  </div>
</div>

<p><b>Using <code>stroke</code> for volume is what makes Zdog special.</b> Let go of your earthly polygons and become one with the round thickness.</p>

{{! --------------------------------------------- }}

<h3>Groups</h3>

{{> group-concept }}

{{! --------------------------------------------- }}
