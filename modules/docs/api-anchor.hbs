{{! --------------------------------------------- }}

<h2>Anchor</h2>

<p>An item that can be added to another item, and have other items added to it.</p>

<p><code>Anchor</code> is the super class of all item and shape classes â€” <code>Shape</code>, <code>Group</code>, <code>Illustration</code>, <code>Rect</code>, <code>Ellipse</code>, <code>Box</code>, etc. All items that can be added to a Zdog scene act as <code>Anchor</code>s. All item classes can use <code>Anchor</code> properties and methods.</p>

<p>The <code>Anchor</code> class itself is an invisible item. <a href="modeling#concepts-anchors">Anchors are useful for collecting related shapes and transforming them together.</a></p>

``` js
let anchor = new Zdog.Anchor({
  // options
});
```

{{! --------------------------------------------- }}

<h3>addTo</h3>

<p>Adds item to parent item.</p>

``` js
addTo: illo
```

<div class="example">
  <div class="example__code">
    ``` js
    // add anchor to illo
    let anchor = new Zdog.Anchor({
      addTo: illo,
    });
    // add triangle to anchor
    let triangle = new Zdog.Shape({
      addTo: anchor,
      translate: { z: 40 },
      // ..
    });
    // add circle to anchor
    let circle = new Zdog.Ellipse({
      addTo: anchor,
      translate: { z: -40 },
      // ..
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="anchorTransform"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="MdOPxQ"}}
  </div>
</div>


{{> child-shapes-add-to }}

{{! --------------------------------------------- }}

<h3>translate</h3>

<p>Positions the item. Set to a <a href="#vector"><code>Vector</code></a>.</p>

<div class="example">
  <div class="example__code">
    ``` js
    translate: { x: 20, y: -40 }
    // move right 20px, up 40px
    ```
  </div>
  <div class="example__demo">
    <canvas class="illo" data-js="anchorTransform" width="240" height="240"
        data-options='{ "translate": { "x": 20, "y": -40 } }'></canvas>
    {{> edit-demo penSlug="OYOBGX"}}
  </div>
</div>

{{! --------------------------------------------- }}

<h3>rotate</h3>

<p>Rotates the item. Set to a <a href="#vector"><code>Vector</code></a> to rotate the item around the corresponding axis.</p>

<div class="example">
  <div class="example__code">
    ``` js
    rotate: { x: Zdog.TAU/8 }
    // rotate around horizontal axis
    ```
  </div>
  <div class="example__demo">
    <canvas class="illo" data-js="anchorTransform" width="240" height="240"
        data-options='{ "rotate": { "x": 0.7854 } }'></canvas>
    {{> edit-demo penSlug="dEZgLB"}}
  </div>
</div>

<div class="example">
  <div class="example__code">
    ``` js
    rotate: { y: Zdog.TAU/8 }
    // rotate around vertical axis
    ```
  </div>
  <div class="example__demo">
    <canvas class="illo" data-js="anchorTransform" width="240" height="240"
        data-options='{ "rotate": { "y": 0.7854 } }'></canvas>
    {{> edit-demo penSlug="zQPmQJ"}}
  </div>
</div>

<div class="example">
  <div class="example__code">
    ``` js
    rotate: { z: Zdog.TAU/8 }
    // rotate around z axis
    ```
  </div>
  <div class="example__demo">
    <canvas class="illo" data-js="anchorTransform" width="240" height="240"
        data-options='{ "rotate": { "z": 0.7854 } }'></canvas>
    {{> edit-demo penSlug="vwWVqY"}}
  </div>
</div>

{{! --------------------------------------------- }}

<h3>scale</h3>

<p>Enlarges or shrinks item geometry. <code>scale</code> does not scale <code>stroke</code>.</p>

<p>Set <code>scale</code> with a number to set <code>x</code>, <code>y</code>, & <code>z</code> scales to the same value.</p>

<div class="example">
  <div class="example__code">
    ``` js
    scale: 2
    // scale up all coordinates 200%
    ```
  </div>
  <div class="example__demo">
    <canvas class="illo" data-js="anchorTransform" width="240" height="240"
        data-options='{ "scale": 2 }'></canvas>
    {{> edit-demo penSlug="gJXBNP"}}
  </div>
</div>

<p>Set <code>scale</code> to a <a href="#vector"><code>Vector</code></a> to set coordinate-specific scale.</p>

<div class="example">
  <div class="example__code">
    ``` js
    scale: { x: 0.5, y: 1.5 }
    // scale x 50%, y 150%
    ```
  </div>
  <div class="example__demo">
    <canvas class="illo" data-js="anchorTransform" width="240" height="240"
        data-options='{ "scale": { "x": 0.5, "y": 1.5 } }'></canvas>
    {{> edit-demo penSlug="MdOPMQ"}}
  </div>
</div>

{{! --------------------------------------------- }}

<h3>copy()</h3>

<p>Copy an item. <code>copy()</code> only copies the item, not the item&rsquo;s graph of descendant items. Use <a href="#anchor-copygraph"><code>copyGraph()</code></a> to copy the item and its graph.</p>

{{> copy-example }}

{{! --------------------------------------------- }}

<h3>copyGraph()</h3>

<p>Copies item and its descendent items.</p>

{{> copy-graph-example }}

{{! --------------------------------------------- }}

<h3>addChild()</h3>

<p>Adds child item. <code>addChild()</code> is useful for moving a child item to a new parent, or  creating an item without <a href="#anchor-addto"><code>addTo</code></a>.</p>

``` js
let anchor = new Zdog.Anchor({
  // ...
});

let shape = new Zdog.Shape({
  // no addTo
});
// add shape to anchor
anchor.addChild( shape );
```

{{! --------------------------------------------- }}

<h3>removeChild()</h3>

<p>Removes child item</p>

``` js
let shape = new Zdog.Shape({
  addTo: anchor,
});

anchor.removeChild( shape );
```

{{! --------------------------------------------- }}

<h3>remove()</h3>

<p>Removes item from parent.</p>

``` js
let shape = new Zdog.Shape({
  addTo: anchor,
});

shape.remove();
```

{{! --------------------------------------------- }}

<h3>updateGraph()</h3>

<p>Updates the items and all its graph of descendant items so they are ready for rendering. Useful for <a href="extras#rendering-without-illustration">rendering without <code>Illustration</code></a>.</p>

``` js
anchor.updateGraph();
```

{{! --------------------------------------------- }}

<h3>renderGraphCanvas()</h3>

<p>Renders the item and all its descendant items to a <code>&lt;canvas></code> element. Useful for <a href="extras#rendering-without-illustration">rendering without <code>Illustration</code></a>.</p>

``` js
anchor.renderGraphCanvas( ctx );
```

<ul>
  <li><code>ctx</code>: <i>CanvasRenderingContext2D</i></li>
</ul>

``` js
let canvas = document.querySelector('.zdog-canvas');
let ctx = canvas.getContext('2d');

let scene = new Anchor();
// add some shapes...

scene.updateGraph();
// render on canvas
scene.renderGraphCanvas( ctx );
```

{{! --------------------------------------------- }}

<h3>renderGraphSvg()</h3>

<p>Renders the item and all its descendant items to an SVG element. Useful for <a href="extras#rendering-without-illustration">rendering without  <code>Illustration</code></a>.</p>

``` js
anchor.renderGraphSvg( element );
```

<ul>
  <li><code>element</code>: An SVG container element like <code>&lt;svg></code> or <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g"><code>&lt;g></code></a>.</li>
</ul>

``` js
let svg = document.querySelector('.zdog-svg');

let scene = new Anchor({...});
// add some shapes...

scene.updateGraph();
// render on SVG
scene.renderGraphSvg( svg );
```

{{! --------------------------------------------- }}

<h3>normalizeRotate()</h3>

<p>Wraps-around <code>rotate</code> <code>x</code>, <code>y</code>, &amp; <code>z</code> values between <code>0</code> and <a href="#utilities-tau"><code>TAU</code></a>.</p>

{{! --------------------------------------------- }}
