---
title: Extras
---

{{! --------------------------------------------- }}

<h2>Z-fighting</h2>

<div class="example">
  <div class="example__code">
    <p><a href="https://en.wikipedia.org/wiki/Z-fighting">Z-fighting</a> is when two shapes pop-over one another as they appear to fight for position. In polygonal 3D engines, z-fighting happens when two polygons are coplanar. In Zdog, z-fighting happens when any shapes occupy the same space.</p>
  </div>
  <div class="example__demo">
    <canvas data-js="zFightIntro" data-step="1"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="QRmWgd"}}
  </div>
</div>

<p>Z-fighting in Zdog is the natural result of its pseudo-3D engine. Zdog&rsquo;s 3D shapes are actually 2D projections, rendered without any accounting for collisions with other shapes.</p>

<p>Rather than fighting against this effect, the best course is to accept it. Z-fighting is one of Zdog&rsquo;s <em>charms</em>. <strong>Embrace it.</strong></p>

<p>That said, there are some techniques to address z-fighting.</p>

<div class="example">
  <div class="example__code">
    <p>A simple solution is to use the same color for multiple shapes.</p>
  </div>
  <div class="example__demo">
    <canvas data-js="zFightIntro" data-step="3"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="GaxRMg"}}
  </div>
</div>

<div class="example">
  <div class="example__code">
    <p>For shapes of similar size, move the shapes away from one another so their <a href="modeling#concepts-stroke-volume">stroke volume</a> do not overlap.</p>
  </div>
  <div class="example__demo">
    <canvas data-js="zFightIntro" data-step="2"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="mYxdqd"}}
  </div>
</div>

<div class="example">
  <div class="example__code">
    <p>Use a <a href="api#group"><code>Group</code></a> for groups of shapes that collectively cover the same area as a larger shape. In this demo, the gold dots are in a <code>Group</code>, whereas the purple dots are individual shapes.</p>
  </div>
  <div class="example__demo">
    <canvas data-js="zFightDotSandwich"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="wbmvpW"}}
  </div>
</div>

<p>Use a <code>Shape</code> with <code>visible: false</code> in a <code>Group</code> to balance out its z-index.  <code>Shape</code> z-index is calculated as the average of all the shape&rsquo;s path points. <code>Group</code> z-index is calcuated as the average of all the grouped shapes' z-indexes. So you can affect the z-index of a <code>Group</code> by adding or moving invisible shapes.</p>

<p>In the demo below, the gold dot has a counter-balanced invisible shape in its group.</p>

<div class="example">
  <div class="example__code">
    ``` js
    let group = new Zdog.Group({...});
    // dot
    new Zdog.Shape({
      addTo: group,
      stroke: 20,
      translate: { x: 45, y: -45 },
      color: '#EA0',
    });
    // invisible Shape to counter-balance group z-index
    new Zdog.Shape({
      addTo: group,
      visible: false,
      translate: { x: -45, y: 45 },
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="zFightDotCracker"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="OYvJQN"}}
  </div>
</div>

{{! --------------------------------------------- }}

<h2>Known bugs</h2>

{{! --------------------------------------------- }}

<h3>Hemisphere, Cylinder, &amp; Cone scale bug</h3>

<p>Due to Zdog&rsquo;s underlying math, <code>Hemisphere</code>, <code>Cylinder</code>, and <code>Cone</code> shapes cannot be scaled with a 1- or 2-dimensional <code>Vector</code>.</p>

<div class="example" data-js="evalShapeDemo">
  <div class="example__code">
    ``` js
    let anchor = new Zdog.Anchor({
      // 1-dimensional scale
      // will break Hemisphere, Cone, & Cylinder
      scale: { y: 2 },
    });

    new Zdog.Hemisphere({ addTo: anchor, /*...*/ });
    new Zdog.Cylinder({ addTo: anchor, /*...*/ });
    new Zdog.Cone({ addTo: anchor, /*...*/ });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="compositeScaleBug" data-scale='{ "y": 2 }'
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="oRqNqO"}}
  </div>
</div>

<p>However, uniform <code>Vector</code> options will still work.</p>

<div class="example" data-js="evalShapeDemo">
  <div class="example__code">
    ``` js
    let anchor = new Zdog.Anchor({
      // uniform scale, will be okay
      scale: 2,
    });

    new Zdog.Hemisphere({ addTo: anchor, /*...*/ });
    new Zdog.Cylinder({ addTo: anchor, /*...*/ });
    new Zdog.Cone({ addTo: anchor, /*...*/ });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="compositeScaleBug" data-scale='2'
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="RmMwJN"}}
  </div>
</div>


{{! --------------------------------------------- }}

<h3>One pixel gaps</h3>

<p>Gaps can appear in between flat polygons of solids.</p>

<div class="example" data-js="evalShapeDemo">
  <div class="example__code">
    ``` js
    new Zdog.Box({
      addTo: illo,
      width: 120,
      height: 100,
      depth: 80,
      rotate: { x: -Zdog.TAU/8, y: Zdog.TAU/8 },
      stroke: false,
      color: '#EA0',
      rearFace: '#636',
      leftFace: '#636',
      bottomFace: '#636',
    });
    ```
  </div>
  <div class="example__demo">
    <canvas class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="qGoByv"}}
  </div>
</div>

<p>You can cover over this gaps by adding a 1-pixel-wide stroke to the polygons.</p>

<div class="example">
  <div class="example__code">
    ``` js
    // with an Illustration without zoom set

    new Zdog.Box({
      // 1px stroke to cover edge-to-edge gaps
      stroke: 1,
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="onePixelGapFix" class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="OYvJoX"}}
  </div>
</div>

<div class="example">
  <div class="example__code">
    ``` js
    // with an Illustration with zoom set
    let illo = new Illustration({
      zoom: 4,
      // ...
    });

    new Zdog.Box({
      addTo: illo,
      stroke: 1 / illo.zoom, // 1px stroke
      // ...
    });
    ```
  </div>
  <div class="example__demo">
    <canvas data-js="onePixelGapFixZoom"
        class="illo" width="240" height="240"></canvas>
    {{> edit-demo penSlug="qGoBMw"}}
  </div>
</div>

{{! --------------------------------------------- }}

<h2>Rendering without Illustration</h2>

<p>You can render Zdog models without using <a href="api#illustration"><code>Illustration</code></a>, in the case you are directly using a <code>&lt;canvas&gt;</code> or <code>&lt;svg&gt;</code> and prefer to handle managing the element yourself.</p>

<p>The demos below work by using a generic <a href="api#anchor"><code>Anchor</code></a> as the <code>scene</code> object. The <code>scene</code>&rsquo;s graph is then updated with <a href="api#anchor-updategraph"><code>updateGraph</code></a> and rotated by dragging with a <a href="api#dragger"><code>Dragger</code></a>.</p>

{{! --------------------------------------------- }}

<h3>Rendering with canvas without Illustration</h3>

<p>Render the <code>scene</code>&rsquo;s graph on a <code>&lt;canvas&gt;</code> with <a href="api#anchor-rendergraphcanvas"><code>renderGraphCanvas</code></a>. Additional code is required to prepare the canvas for rendering. <a href="https://codepen.io/desandro/pen/MdVWzV">View this demo on CodePen.</a></p>

``` js
// ----- setup ----- //

// get canvas element and its context
let canvas = document.querySelector('.zdog-canvas');
let ctx = canvas.getContext('2d');
// get canvas size
let canvasWidth = canvas.width;
let canvasHeight = canvas.height;
// illustration variables
const TAU = Zdog.TAU;
const zoom = 4;
let isSpinning = true;

// create an scene Anchor to hold all items
let scene = new Zdog.Anchor();

// ----- model ----- //

// add shapes to scene
new Zdog.Shape({
  addTo: scene,
  //...
});

new Zdog.Ellipse({
  addTo: scene,
  //...
});

// ----- animate ----- //

function animate() {
  // make changes to model, like rotating scene
  scene.rotate.y += isSpinning ? 0.03 : 0;
  scene.updateGraph();
  render();
  requestAnimationFrame( animate );
}

function render() {
  // clear canvas
  ctx.clearRect( 0, 0, canvasWidth, canvasHeight );
  ctx.save();
  // center canvas & zoom
  ctx.translate( canvasWidth/2, canvasHeight/2 );
  ctx.scale( zoom, zoom );
  // set lineJoin and lineCap to round
  ctx.lineJoin = 'round';
  ctx.lineCap = 'round';
  // render scene graph
  scene.renderGraphCanvas( ctx );
  ctx.restore();
}

animate();

// ----- drag ----- //

let dragStartRX, dragStartRY;
let minSize = Math.min( canvasWidth, canvasHeight );

// add drag-rotatation with Dragger
new Zdog.Dragger({
  startElement: canvas,
  onDragStart: function() {
    isSpinning = false;
    dragStartRX = scene.rotate.x;
    dragStartRY = scene.rotate.y;
  },
  onDragMove: function( pointer, moveX, moveY ) {
    scene.rotate.x = dragStartRX - ( moveY / minSize * TAU );
    scene.rotate.y = dragStartRY - ( moveX / minSize * TAU );
  },
});
```
{{> edit-demo penSlug="MdVWzV"}}

{{! --------------------------------------------- }}

<h3>Rendering with SVG without Illustration</h3>

<p>Render the scene&rsquo;s graph on a <code>&lt;svg&gt;</code> with <a href="api#anchor-rendergraphsvg"><code>renderGraphSvg</code></a>. Additional code is required to prepare the SVG for rendering. <a href="https://codepen.io/desandro/pen/OYvJqb">View this demo on CodePen.</a></p>

``` js
// ----- setup ----- //

// get svg element
let svg = document.querySelector('svg');
// rendering sizes
const zoom = 4;
let sceneWidth = 16;
let sceneHeight = 16;
let viewWidth = sceneWidth * zoom;
let viewHeight = sceneHeight * zoom;
let svgWidth = svg.getAttribute('width');
let svgHeight = svg.getAttribute('height');
// set viewBox using zoom
svg.setAttribute( 'viewBox', `${-viewWidth/2}  ${-viewHeight/2} ` +
  `${viewWidth} ${viewHeight}` );
// rendering variable
const TAU = Zdog.TAU;
let isSpinning = true;

// create an scene Anchor to hold all items
let scene = new Zdog.Anchor();

// ----- model ----- //

// add shapes to scene
new Zdog.Shape({
  addTo: scene,
  //...
});

new Zdog.Ellipse({
  addTo: scene,
  //...
});

// ----- animate ----- //

function animate() {
  scene.rotate.y += isSpinning ? 0.03 : 0;
  scene.updateGraph();
  render();
  requestAnimationFrame( animate );
}

function render() {
  empty( svg );
  scene.renderGraphSvg( svg );
}

animate();

function empty( element ) {
  while ( element.firstChild ) {
    element.removeChild( element.firstChild );
  }
}

// ----- drag ----- //

// click drag to rotate
let dragStartRX, dragStartRY;
let minSize = Math.min( svgWidth, svgHeight );

// add drag-rotatation with Dragger
new Zdog.Dragger({
  startElement: svg,
  onDragStart: function() {
    isSpinning = false;
    dragStartRX = scene.rotate.x;
    dragStartRY = scene.rotate.y;
  },
  onDragMove: function( pointer, moveX, moveY ) {
    scene.rotate.x = dragStartRX - ( moveY / minSize * TAU );
    scene.rotate.y = dragStartRY - ( moveX / minSize * TAU );
  },
});
```
{{> edit-demo penSlug="OYvJqb"}}

{{! --------------------------------------------- }}

<h2>Canvas or SVG</h2>

<p>Should you use <code>&lt;canvas&gt;</code> or <code>&lt;svg&gt;</code>? Visually, canvas and SVG output the same exact image with Zdog. In practice, they each have their benefits.</p>

<p><strong>Canvas is better for lots of shapes and smaller image sizes</strong>. Canvas renders on a flat image, so it doesn't have to manage a DOM. But its rendered with pixels, so it can be slower with larger sizes — particularly with high-resolution screens.</p>

<p><strong>SVG is better for fewer shapes and larger image sizes.</strong> SVG is a vector format, so its resolution independent, perfect for large image sizes. However, all shapes have to be rendered and sorted with individual DOM elements, which can negatively impact performance and get your fan spinning.</p>

{{! --------------------------------------------- }}

<h2>Feature requests</h2>

<p>Help me select new features by adding your 👍 reaction to <a href="https://github.com/metafizzy/zdog/labels/feature%20request">GitHub issues for features</a> you would like to see added. Hotly requested features include:</p>

<ul>
  <li><a href="https://github.com/metafizzy/zdog/issues/2">Perspective</a></li>
  <li><a href="https://github.com/metafizzy/zdog/issues/3"><code>Hemisphere</code>, <code>Cylinder</code>, and <code>Cone</code> wedge shapes</a></li>
  <li><a href="https://github.com/metafizzy/zdog/issues/4"><code>backface</code> for <code>Group</code></a></li>
  <li><a href="https://github.com/metafizzy/zdog/issues/5"><code>addToPoint</code> option</a> to add items to named <code>path</code> points, for easier point-to-point modeling.</li>
  <li><a href="https://github.com/metafizzy/zdog/issues/6"><code>name</code> option for items</a> so items can be accessed via parent, useful with <a href="api#anchor-copygraph"><code>copyGraph</code></a>.</li>
</ul>

{{! --------------------------------------------- }}
